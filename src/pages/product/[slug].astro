---
import Breadcrumbs from '@components/common/Breadcrumbs.astro';
import ProductDetail from '@components/products/ProductDetail.astro';
import RelatedProducts from '@components/products/RelatedProducts.astro';
import type Product from '@interfaces/product';
import Layout from '@layouts/Layout.astro';
import fetchApi from '../../lib/strapi';
import '../../styles/global.css';

export async function getStaticPaths() {
	try {
		const response = await fetchApi<{
			data: Product[];
			meta: { pagination: { total: number } };
		}>({
			endpoint: 'products',
			query: {
				'fields[0]': 'slug',
			},
		});

		return response.data.map((product) => ({
			params: { slug: product.slug },
		}));
	} catch (error) {
		console.error('Error fetching product slugs:', error);
		return [];
	}
}

const { slug } = Astro.params;
let product: Product | null = null;
let relatedProducts: Product[] = [];
let error = null;

try {
	const productResponse = await fetchApi<{
		data: Product[];
		meta: { pagination: { total: number } };
	}>({
		endpoint: 'products',
		query: {
			'filters[slug][$eq]': slug || '',
			'populate[0]': 'image',
			'populate[1]': 'categories',
		},
	});

	if (productResponse.data.length > 0) {
		product = productResponse.data[0];

		if (product.categories && product.categories.length > 0) {
			const categoryId = product.categories[0].id;

			const relatedResponse = await fetchApi<{
				data: Product[];
				meta: { pagination: { total: number } };
			}>({
				endpoint: 'products',
				query: {
					'filters[categories][id][$eq]': categoryId.toString(),
					'filters[slug][$ne]': slug || '',
					'populate[0]': 'image',
					'populate[1]': 'categories',
					'pagination[limit]': '3',
				},
			});

			relatedProducts = relatedResponse.data;
		}
	} else {
		throw new Error('Producto no encontrado');
	}
} catch (e) {
	console.error('Error fetching product data:', e);
	error = e instanceof Error ? e.message : 'Error desconocido al cargar datos';
}

const breadcrumbPaths = product
	? [
			{ label: 'Inicio', url: '/' },
			{ label: 'Productos', url: '/products' },
			{ label: product.name, url: '', current: true },
		]
	: [];
---

<Layout
  title={product ? `JMS - ${product.name}` : 'JMS - Producto no encontrado'}
  description={product?.description || 'Detalles del producto'}>
  <main class="min-h-screen bg-gradient-to-b from-gray-50 to-gray-100 pt-[72px] sm:pt-[88px]">
    <div class="container mx-auto px-4 py-12 md:py-20">
      {error ? (
        <div class="bg-red-50 border border-red-200 text-red-800 rounded-lg p-4 mb-8">
          <h3 class="font-bold text-lg mb-2">Error al cargar el producto</h3>
          <p>{error}</p>
          <p class="mt-2 text-sm">Por favor, intenta nuevamente más tarde.</p>
          <a href="/products" class="inline-block mt-4 px-4 py-2 bg-main-blue text-white rounded hover:bg-blue-700">
            Volver a Productos
          </a>
        </div>
      ) : product ? (
        <>
          <Breadcrumbs paths={breadcrumbPaths} />
          <ProductDetail product={product} />
          {relatedProducts.length > 0 && <RelatedProducts products={relatedProducts} />}
        </>
      ) : (
        <div class="text-center py-12">
          <h2 class="text-2xl font-bold text-gray-800 mb-4">Producto no encontrado</h2>
          <p class="mb-6">Lo sentimos, no pudimos encontrar el producto que estás buscando.</p>
          <a href="/products" class="inline-block px-4 py-2 bg-main-blue text-white rounded hover:bg-blue-700">
            Volver a Productos
          </a>
        </div>
      )}
    </div>
  </main>
</Layout>